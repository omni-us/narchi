#!/usr/bin/env bash

## Create pre-commit symlink if unset ##
GITDIR="";
if [ -d .git ]; then
  GITDIR=".git";
elif [ -f .git ]; then
  GITDIR=$(sed -n '/^gitdir:/{ s|.*: ||; p; }' .git);
fi
if [ ! -d "$GITDIR" ]; then
  echo "${0##*/}: error: unable to find git directory" 1>&2;
  exit 1;
fi
if [ ! -h "$GITDIR/hooks/pre-commit" ]; then
  if [ $(realpath --help 2>&1 | grep -c relative) != 0 ]; then
    HOOK=$(realpath --relative-to="$GITDIR/hooks" ./githook-pre-commit);
  else
    HOOK=$(readlink -f ./githook-pre-commit);
  fi
  ln -fs "$HOOK" "$GITDIR/hooks/pre-commit";
  echo "${0##*/}: creating git pre-commit hook symlink" 1>&2;
  exit 1;
fi


## Check files that changed ##
FILES=( $(git status --porcelain | sed -r 's|^ |_|; s|^(.) |\1_|; s|^(R[_M]) .* ->|\1|;' | grep -E '^([MRA]|.M)') );
PYLINT=$(which pylint pylint3 | head -n 1);
PYLINT+=" --errors-only";

check_change_after_staged () {
  [ "${2:1:1}" = "M" ] &&
    echo "${0##*/}: error: changed after staged: $1" 1>&2 &&
    exit 1;
}

n=1;
while [ "$n" -lt "${#FILES[@]}" ]; do
  check_change_after_staged "${FILES[$n]}" "${FILES[$((n-1))]}";
  case "${FILES[$n]}" in
    *.py )
      echo "${0##*/}: pycodestyle ${FILES[$n]}" 1>&2;
      pycodestyle "${FILES[$n]}";
      [ "$?" != "0" ] && exit 1;
      echo "${0##*/}: $PYLINT ${FILES[$n]}" 1>&2;
      $PYLINT "${FILES[$n]}";
      ;;
  esac
  [ "$?" != "0" ] && exit 1;
  n=$((n+2));
done

## Run unit tests ##
./setup.py test_coverage;
[ "$?" != "0" ] && exit 1;

## Build html documentation ##
if [ "${BUMPVERSION_NEW_VERSION+x}" != "" ]; then
  ./setup.py build_sphinx --quiet --builder html --version $BUMPVERSION_NEW_VERSION --release $BUMPVERSION_NEW_VERSION &&
    rm -fr docs &&
    mv sphinx/_build/html docs &&
    git add docs;
  [ "$?" != "0" ] && exit 1;
fi

exit 0;
